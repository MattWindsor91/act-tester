package fuzzer

import (
	"context"

	"github.com/MattWindsor91/act-tester/internal/pkg/subject"

	"github.com/MattWindsor91/act-tester/internal/pkg/plan"
)

// SingleFuzzer represents types that can commune with a C litmus test fuzzer.
type SingleFuzzer interface {
	// FuzzSingle fuzzes the test at path inPath using the given seed,
	// outputting the new test to path outPath and the trace to tracePath.
	FuzzSingle(ctx context.Context, seed int32, inPath, outPath, tracePath string) error
}

// SubjectPather is the interface of things that serve file-paths for subject outputs during a fuzz batch.
type SubjectPather interface {
	// Prepare sets up the directories ready to serve through SubjectPaths.
	Prepare() error

	// SubjectPaths gets the litmus and trace file paths for the subject/cycle pair sc.
	SubjectPaths(sc SubjectCycle) subject.FuzzFileset
}

// Config represents the configuration that goes into a batch fuzzer run.
type Config struct {
	// Driver holds the single-file fuzzer that the fuzzer is going to use.
	Driver SingleFuzzer

	// Paths contains the path set for things generated by this fuzzer.
	Paths SubjectPather

	// CorpusSize is the sampling size for the corpus after fuzzing.
	// It has a similar effect to CorpusSize in planner.Planner.
	CorpusSize int

	// SubjectCycles is the number of times to fuzz each file.
	SubjectCycles int

	// FuzzWorkers is the number of separate goroutines to launch for fuzzing.
	FuzzWorkers int
}

// Run runs a fuzzer configured by this config.
func (c *Config) Run(ctx context.Context, p *plan.Plan) (*plan.Plan, error) {
	f, err := New(c, p)
	if err != nil {
		return nil, err
	}
	return f.Fuzz(ctx)
}

// Package director contains a test-plan fuzzer.
// It relies on the existence of a single-file fuzzer such as act-fuzz.
package fuzzer

import (
	"math/rand"

	"github.com/MattWindsor91/act-tester/internal/pkg/model"
	"github.com/cheggaaa/pb/v3"
	"github.com/sirupsen/logrus"
)

// DefaultSubjectCycles is the default number of fuzz cycles to run per subject.
const DefaultSubjectCycles = 10

// SingleFuzzer represents types that can commune with a C litmus test fuzzer.
type SingleFuzzer interface {
	// FuzzSingle fuzzes the test at path inPath using the given seed,
	// outputting the new test to path outPath and the trace to tracePath.
	FuzzSingle(seed int32, inPath, outPath, tracePath string) error
}

// Fuzzer holds the configuration required to fuzz a plan file.
type Fuzzer struct {
	model.PlanLoader

	// Driver holds the single-file fuzzer that the fuzzer is going to use.
	Driver SingleFuzzer

	// OutDir contains the root output directory for things generated by this fuzzer.
	OutDir string

	// SubjectCycles is the number of times to fuzz each file.
	SubjectCycles int
}

// Fuzz runs the fuzzer.
func (f *Fuzzer) Fuzz() error {
	logrus.Infoln("loading plan")
	if err := f.LoadPlan(); err != nil {
		return err
	}

	ps, perr := f.setupPathset()
	if perr != nil {
		return perr
	}

	rng := rand.New(rand.NewSource(f.Plan.Seed))
	fcs, ferr := f.fuzzWithPathset(rng, ps)
	if ferr != nil {
		return ferr
	}

	logrus.Infoln("updating plan")
	f.Plan.Corpus = fcs
	f.Plan.Seed = rng.Int63()

	return f.Plan.Dump()
}

func (f *Fuzzer) fuzzWithPathset(rng *rand.Rand, ps *Pathset) (model.Corpus, error) {
	nsubjects := len(f.Plan.Corpus)
	nfuzzes := f.SubjectCycles * nsubjects

	fcs := make(model.Corpus, 0, nfuzzes)

	bar := pb.StartNew(nfuzzes)
	defer bar.Finish()

	for _, s := range f.Plan.Corpus {
		fc, err := f.fuzzSubject(s, ps, rng, bar)
		if err != nil {
			return nil, err
		}
		fcs = append(fcs, fc...)
	}

	return fcs, nil
}

// fuzzSubject fuzzes subject s with a seed generated by rng, storing according to ps and announcing progress on bar.
func (f *Fuzzer) fuzzSubject(s model.Subject, ps *Pathset, rng *rand.Rand, bar *pb.ProgressBar) (model.Corpus, error) {
	fuzzed := make(model.Corpus, f.SubjectCycles)

	for i := range fuzzed {
		outp, tracep := ps.OnSubject(s.Name, i)
		if err := f.Driver.FuzzSingle(rng.Int31(), s.Litmus, outp, tracep); err != nil {
			return nil, err
		}
		fuzzed[i] = model.Subject{
			Name:       CycledName(s.Name, i),
			OrigLitmus: s.Litmus,
			Litmus:     outp,
			TracePath:  tracep,
		}
		bar.Increment()
	}

	return fuzzed, nil
}

// setupPathset builds the Pathset to use for fuzzing, and makes its directories if they don't yet exist
func (f *Fuzzer) setupPathset() (*Pathset, error) {
	logrus.Infof("output directory: %s\n", f.OutDir)
	ps := NewPathset(f.OutDir)
	err := ps.Mkdirs()
	return ps, err
}

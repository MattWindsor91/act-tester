// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	compiler "github.com/c4-project/c4t/internal/model/service/compiler"

	mock "github.com/stretchr/testify/mock"

	optlevel "github.com/c4-project/c4t/internal/model/service/compiler/optlevel"

	service "github.com/c4-project/c4t/internal/model/service"

	stringhelp "github.com/c4-project/c4t/internal/helper/stringhelp"
)

// Compiler is an autogenerated mock type for the Compiler type
type Compiler struct {
	mock.Mock
}

// DefaultMOpts provides a mock function with given fields: c
func (_m *Compiler) DefaultMOpts(c *compiler.Compiler) (stringhelp.Set, error) {
	ret := _m.Called(c)

	var r0 stringhelp.Set
	if rf, ok := ret.Get(0).(func(*compiler.Compiler) stringhelp.Set); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stringhelp.Set)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*compiler.Compiler) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DefaultOptLevels provides a mock function with given fields: c
func (_m *Compiler) DefaultOptLevels(c *compiler.Compiler) (stringhelp.Set, error) {
	ret := _m.Called(c)

	var r0 stringhelp.Set
	if rf, ok := ret.Get(0).(func(*compiler.Compiler) stringhelp.Set); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stringhelp.Set)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*compiler.Compiler) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OptLevels provides a mock function with given fields: c
func (_m *Compiler) OptLevels(c *compiler.Compiler) (map[string]optlevel.Level, error) {
	ret := _m.Called(c)

	var r0 map[string]optlevel.Level
	if rf, ok := ret.Get(0).(func(*compiler.Compiler) map[string]optlevel.Level); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]optlevel.Level)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*compiler.Compiler) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunCompiler provides a mock function with given fields: ctx, j, sr
func (_m *Compiler) RunCompiler(ctx context.Context, j compiler.Job, sr service.Runner) error {
	ret := _m.Called(ctx, j, sr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, compiler.Job, service.Runner) error); ok {
		r0 = rf(ctx, j, sr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
